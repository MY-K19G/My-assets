1. What is Distributed tracing? 
	Distributed tracing is a method used to monitor and troubleshoot microservices-based architectures.
	In a microservices environment, multiple independent services communicate with each other to perform a business transaction. This distributed nature makes it difficult to trace the path of a request, diagnose performance bottlenecks, and understand the overall system's behavior. Distributed tracing helps overcome these challenges.(only http requests)
	

2. How Distributed Tracing Works

	When a request enters a system, it is assigned a trace ID, which uniquely identifies that request throughout the journey across services. Each service handling the request creates a span with its unique span ID and records details about the operation. The span is then linked to the parent span, which is the span that initiated the request.

	For example:

		A client sends a request to Service A.
		Service A calls Service B (this is recorded as a span within Service A’s trace).
		Service B calls Service C, and the trace continues across all involved services.
		
3. Micrometer:

    What is it? It's a library for collecting performance metrics in your application (like how many requests are coming in, how fast they are processed, etc.).

    Purpose: It helps you measure things like response time, request count, and error rates.

    How does it help? It lets you track metrics (like "How long does it take to process a request?") and send them to monitoring systems like Prometheus or Datadog.

4. Zipkin:

    What is it? It's a tool for distributed tracing, which means it tracks the journey of a single request as it moves through multiple services in a microservices system.

    Purpose: It helps you see where requests go, how long each part of the request took, and where any delays happen.

    How does it help? It shows you a visual map of how your system works, helping you spot issues like slow services or errors.
	
5. Distributed Tracing Terminology
	5.1. Trace:

	A trace represents the entire journey of a single request as it travels through various services in a distributed system. It is a collection of spans that are logically related.
	5.2. Span:

	A span represents a single unit of work within a trace. It includes information such as:

		Start time and end time (duration of the operation).

		Tags (key-value pairs) providing additional metadata about the operation (e.g., HTTP status, error code, database query).

		Context like traceId, spanId, and parentSpanId that links it to other spans in the trace.

	A span typically corresponds to a request or operation within a microservice (e.g., an HTTP request, database query, etc.).
	5.3. Parent Span:

	A parent span is the initial span that created child spans. In the context of a web request, the parent span may represent the HTTP request made by the client, and child spans may represent calls to microservices or databases.
	2.4. Child Span:

	A child span is a span that is created by or depends on another span (the parent span). For example, an API request to another service would be a child span of the initial API request.
	5.5. Trace Context:

	Trace context refers to the metadata that allows tracing information to be passed across service boundaries. This context is typically propagated via headers (e.g., X-B3-TraceId, X-B3-SpanId), allowing the trace to be continued across multiple systems.
	5.6. Sampling:

	Sampling is the technique used to determine whether a particular request or trace should be captured for monitoring. Sampling is crucial for performance reasons, as capturing all traces can be too costly. Sampling strategies include:

		Probabilistic sampling (e.g., sample 1 out of every 10 requests).

		Rate-limiting sampling (e.g., limit the total number of traces captured per minute).

		Adaptive sampling (sample based on certain conditions like traffic or error rate).

	5.7. TraceID:

	A Trace ID is a unique identifier for a trace. It allows all related spans (from different services) to be grouped together as part of the same trace. Every service involved in the trace will use the same traceId to associate their spans together.
	5.8. SpanID:

	A Span ID uniquely identifies a single span within a trace. It’s used to distinguish one span from another and is passed along with the Trace ID to keep track of the different spans in the trace.
	5.9. ParentSpanID:

	The Parent Span ID refers to the Span ID of the parent span in a hierarchical tracing structure. If a span is the first in the trace (or has no parent), this ID will be null.
	5.10. Tags/Annotations:

		Tags are key-value pairs used to store metadata associated with a span (e.g., http.statusCode: 200, db.query: SELECT * FROM users).

		Annotations are time-stamped events that provide additional context about a span (e.g., "client_sent", "server_received", "db.query_start").

	5.11. Logs:

	Logs can be attached to spans to provide additional insights or events that occurred during the span’s execution. They usually include timestamped messages and can contain stack traces or error details.
	5.12. Latency:

	The latency refers to the time it takes for a span to complete. Distributed tracing allows you to track how long each part of the request journey took, helping to identify performance bottlenecks.

	
5. What is diffrences between Monitoring tools and zipkin?

	Monitoring tools (like Prometheus, Datadog, or Grafana) focus on collecting and displaying metrics about system performance. They track things like CPU usage, memory usage, request count, latency, and error rates across your entire system.

	Zipkin, on the other hand, helps you trace individual requests as they move through your system. It shows you the flow of a request across different microservices, along with the time each service took to process the request. It helps you understand the "journey" of a request, from the moment it's initiated to the time the response is sent back.
	
6. Steps to Implement Distributed Tracing with Zipkin and Micrometer in spirng 3

	step-1: Download the zipkin server for local or use a docker
	
		vist :https://zipkin.io/pages/quickstart.html
			under the section of java click latest release for download.
		or
			curl -sSL https://zipkin.io/quickstart.sh | bash -s
			java -jar zipkin.jar
			*remember to download with -exec end.last time used zipkin-server-3.5.0-exec.jar 
		 Once running, open http://localhost:9411 in your browser to access the Zipkin UI.
			*Propagation Supported :Http (B3), RPC (B3), Messaging (B3)
			*http port 9411 accepts /api/v1/spans (thrift, json) and /api/v2/spans (json, proto) POST requests.
			
	step-2: Checking Traces by Adding Micrometer to a Spring Boot 3 Application
		
		<dependency>
		<!-- Spring Boot Actuator for exposing metrics -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
		<!-- Spring Boot 3+ uses Micrometer Tracing as the new unified tracing API (it replaced Spring Cloud Sleuth). But Micrometer itself is just an API — it needs an actual tracer implementation, like Brave or OpenTelemetry.
		So:
    This bridge plugs Brave into Micrometer.
    It allows Spring to create spans, inject trace context into logs, etc.
	Without this, %traceId and %spanId will never work in logs. -->
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-tracing-bridge-brave</artifactId>
		</dependency>
		<dependency>
		<!-- Brave can collect spans and manage trace context in-memory, but you need something to actually send the trace data to a tracing server (like Zipkin).
		It handles batching, JSON formatting, and sending spans to:
			http://localhost:9411/api/v2/spans
			Without this, traces will never show up in the Zipkin UI, even if they’re collected. -->
			<groupId>io.zipkin.reporter2</groupId>
			<artifactId>zipkin-reporter-brave</artifactId>
		</dependency>
		
	step-3: Configure Zipkin in application.yml
		management:
		  tracing:
			enabled: true
			sampling:
			  probability: 1.0
			export:
			  zipkin:
				enabled: true
				endpoint: http://localhost:9411/api/v2/spans
	
	baseUrl is the URL of your Zipkin server where the trace data will be sent.

	sampler.probability defines the sampling rate (e.g., 1.0 means 100% of requests will be traced, while 0.1 means 10% of requests will be traced).
			
	step-4: logback.xml
	
	<?xml version="1.0" encoding="UTF-8"?>
	<configuration>
	  
	  <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%X{traceId:-N/A}, %X{spanId:-N/A}] %-5level %logger{36} - %msg%n"/>

	  <!-- Console Appender -->
	  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
		  <pattern>${LOG_PATTERN}</pattern>
		</encoder>
	  </appender>

	  <!-- File Appender -->
	  <appender name="FILE" class="ch.qos.logback.core.FileAppender">
		<file>logs/app.log</file>
		<append>true</append>
		<encoder>
		  <pattern>${LOG_PATTERN}</pattern>
		</encoder>
	  </appender>

	  <!-- Root Logger -->
	  <root level="DEBUG">
		<appender-ref ref="STDOUT"/>
		<appender-ref ref="FILE"/>
	  </root>

	</configuration>
	**A trace is active (e.g., during an HTTP request)	You see real [traceId, spanId] 
	**No trace is active (e.g., at app startup, outside of a web request)	You see [N/A, N/A]
	**no trace context (like app startup, background threads, or logs outside HTTP/async calls).
	step-5: add a rest call from SERVICE-A to SERVICE-B
		remember to add your own log to see traceId,spanId or make log level equal or above DEBUG.
	step-6: verify zipkin working
		1.First run the zipkin server.
		2.Run all services.
		3.Hit the your service rest url.
		4.Checking Traces in Zipkin: "Find Traces". You should see recorded traces with timestamps and latency details.
			After clicking “RUN QUERY”
			After clicking “SHOW”
			Go to “Dependencies” > Click “RUN QUERY”. You can see the connection tree.